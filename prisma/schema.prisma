generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../docs/diagrama.md"
// }

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma" //* planetscale index
}

model Example {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text //* MySQL only
  access_token      String? @db.Text //* MySQL only
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text //* MySQL only
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "user_id") //* planetscale index
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "user_id") //* planetscale index
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Worlds        World[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model World {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  Pages       Page[]
  start       Int      @default(0)
  end         Int      @default(0)

  @@index([ownerId], name: "owner_id") //* planetscale index
}

model Page {
  id         String    @id @default(uuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  world      World     @relation(fields: [worldId], references: [id])
  worldId    String
  Blocks     Block[]
  PageType   PageType? @relation(fields: [pageTypeId], references: [id])
  pageTypeId String?

  @@index([pageTypeId], name: "page_type_id") //* planetscale index
  @@index([worldId], name: "world_id") //* planetscale index
}

model PageType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Page      Page[]
}

model Block {
  id        String   @id @default(uuid())
  path      String
  blockType String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id])
  pageId    String

  @@index([pageId], name: "page_id") //* planetscale index
}
